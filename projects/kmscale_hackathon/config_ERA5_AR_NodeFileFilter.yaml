#  --in_nodefile_type <string> ["SN"] [DN|SN]
# The type of nodefile indicated by --in_nodefile: "DN" if from DetectNodes or
# "SN" if from StitchNodes.
in_nodefile_type: "SN"

#  --in_fmt <string> ""
# A comma-separated list of names of the columns within the input nodefile.
in_fmt: "lon,lat,psl,umax,zs,pr"

#  --diag_connect <bool>
# When the data is on a structured grid, consider grid cells to be connected in
# the diagonal (across the vertex).
diag_connect: false

#  --regional <bool>
# Used to indicate that a given latitude-longitude grid should not be periodic
# in the longitudinal direction.
regional: false

#  --var <variable> ""
# A comma-separated list of variables to filter and write to the output.
var: "AR_binary_tag"

#  --maskvar <string> ""
# The name of the variable to write to the output file containing the binary
# mask.
maskvar: ""

#  --preserve <string> "var1;var2;..."
# A comma-separated list of variables to copy from the input data to the output
# data.
preserve: ""

#  --bydist <double> [0.0]
# Unmask regions within the specified great-circle distance of each node.
bydist: 8.0

#  --bycontour <string> [var,delta,dist,minmaxdist]
# Unmask regions within a closed contour based around the nodal feature point
# (or associated minima/maxima if minmaxdist is non-zero). The filter criteria
# are analogous to --closedcontour from DetectNodes and based on the following
# four arguments:
# -> var <variable> is the variable to use for determining the presence of the
#    closed contour.
# -> delta <double> is the depth (if positive) or height (if negative) of the
#    closed contour.
# -> dist <double> is the maximum distance to use for searching out the
#    closed contour.
# -> minmaxdist <double> is the great-circle distance away from the candidate
#    to search for the minima/maxima. If delta is positive (negative), the pivot
#    is a local minimum (maximum).
bycontour: ""

#  --nearbyblobs <string> [var,dist,op,value[,maxdist]]
# Unmask regions where a particular field satisfies a given threshold, as long
# as that threshold is satisfied within a given dist of the nodal feature. For
# each point found, a breadth-first search is applied to find all points
# connected to that point that also satisfy the threshold. The search is only
# performed within maxdist (if specified). The arguments are as follows:
# -> var <variable> is the variable to use for the thresholding operation.
# -> dist <double> is the distance where the algorithm searches for seed points
#    that satisfy the threshold.
# -> op <string> is the operator used to determine if the threshold is
#    satisfied (options include >,>=,<,<=,=,!=).
# -> value <double> is the value on the right-hand-side of the comparison.
# -> maxdist <double> is the maximum distance to search for points connected to
#    the seed points.
nearbyblobs: ""

#  --invert <bool>
# Invert the mask generated by --bydist, --bycontour, or --nearbyblobs.
invert: true

#  --timefilter <string> ""
# A regular expression used to match only those time values to be retained. 
# Several default values are available as well as follows.
# 3hr filter every 3 hourly (equivalent to 
# "....-..-.. (00|03|06|09|12|15|18|21):00:00").
# 6hr filter every 6 hourly (equivalent to "....-..-.. (00|06|12|18):00:00").
# daily filter daily (equivalent to "....-..-.. 00:00:00").
timefilter: "6hr"

#  --lonname <string> "lon"
# Name of the longitude variable in the data files.
lonname: "longitude"

#  --latname <string> "lat"
# Name of the latitude variable in the data files.
latname: "latitude"